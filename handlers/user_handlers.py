import asyncio

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, Union, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from decouple import config

from database.events_db import get_events
from database.user_db import get_user, create_user, update_username, toggle_category, enable_notifications, \
    disable_notifications
from config import bot, logger
from keyboards.user_kbs import main_menu_kb, select_categories_kb, go_menu_kb, select_frequency_of_notifications_kb, \
    control_subscribe_kb, confirm_unsubscribe_kb
from states.user_states import UserStates

user_router = Router()

@user_router.callback_query(F.data == 'go_menu')
async def go_menu(call: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.menu)
    await call.message.edit_text('–ù–µ –∑–Ω–∞–µ—à—å, –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å? –í—ã–±–µ—Ä–∏ —Å–µ–±–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–µ–º –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫',
                                 reply_markup=await main_menu_kb(call.from_user.id))

@user_router.message(Command('start'))
async def start_command(message: Message, state: FSMContext):
    if state is not None:
        await state.clear()

    user_data = await get_user(message.from_user.id)
    if user_data is None:
        await create_user(message.from_user.id, message.from_user.username)

    elif user_data['username'] != message.from_user.username:
        await update_username(message.from_user.id, message.from_user.username)

    await message.answer('–ù–µ –∑–Ω–∞–µ—à—å, –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å? –í—ã–±–µ—Ä–∏ —Å–µ–±–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–µ–º –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫',
                         reply_markup=await main_menu_kb(message.from_user.id))
    await state.set_state(UserStates.menu)

@user_router.callback_query(UserStates.menu)
async def menu_handler(call: CallbackQuery, state: FSMContext):
    if call.data == 'select_category_of_events':
        await state.set_state(UserStates.select_categories)
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=await select_categories_kb(call.from_user.id))

    # elif call.data == 'get_today_events':
    #     # await state.set_state(UserStates.get_today_events)
    #     # await state.clear()
        # await call.message.edit_text('–§—É–Ω–∫—Ü–∏—è –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=go_menu_kb())
        # events = await get_events('today')


    elif call.data == 'get_week_events':
        # await state.set_state(UserStates.get_week_events)
        await state.clear()
        await call.message.edit_text('–§—É–Ω–∫—Ü–∏—è –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=go_menu_kb())

    elif call.data == 'get_month_events':
        # await state.set_state(UserStates.get_month_events)
        await state.clear()
        await call.message.edit_text('–§—É–Ω–∫—Ü–∏—è –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=go_menu_kb())


    elif call.data == 'subscribe_on_notifications':

        await state.set_state(UserStates.subscribe_on_notifications)
        await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n\n'
                                     '–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö',
                                     reply_markup=select_frequency_of_notifications_kb())



    elif call.data == 'control_subscribe':

        await state.set_state(UserStates.control_subscribe)
        user_data = await get_user(call.from_user.id)
        frequency = user_data['notification_frequency']

        await call.message.edit_text(f'–°–µ–π—á–∞—Å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ {frequency} {"–¥–Ω–µ–π" if frequency == 7 else "–¥–µ–Ω—å"}',
                                     reply_markup=control_subscribe_kb(frequency))


@user_router.callback_query(UserStates.select_categories)
async def select_category_of_events(call: CallbackQuery, state: FSMContext):

    selected_category = call.data.split(':')[1]
    user_data = await get_user(call.from_user.id)
    user_categories = user_data['selected_category']

    if selected_category in user_categories:
        user_categories.remove(selected_category)
    else:
        user_categories.append(selected_category)

    await toggle_category(call.from_user.id, user_categories)

    await call.message.edit_reply_markup(reply_markup=await select_categories_kb(call.from_user.id))

@user_router.callback_query(UserStates.subscribe_on_notifications)
async def subscribe_on_notifications(call: CallbackQuery, state: FSMContext):
    period = int(call.data.split(':')[1])
    await enable_notifications(call.from_user.id, period)

    await call.message.edit_text('–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n'
                                 f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ä–∞–∑ –≤ {period} {"–¥–Ω–µ–π" if period == 7 else "–¥–µ–Ω—å"}\n'
                                 f'–£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π–¥—è –≤ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"',
                                 reply_markup=await main_menu_kb(call.from_user.id))
    await state.set_state(UserStates.menu)

@user_router.callback_query(UserStates.control_subscribe)
async def control_subscribe(call: CallbackQuery, state: FSMContext):
    if call.data.startswith('change_frequency'):
        new_frequency = int(call.data.split(':')[1])
        await enable_notifications(call.from_user.id, new_frequency)
        await call.message.edit_text(f'–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ {new_frequency} {"–¥–Ω–µ–π" if new_frequency == 7 else "–¥–µ–Ω—å"}',
                                     reply_markup=await main_menu_kb(call.from_user.id))
        await state.set_state(UserStates.menu)

    elif call.data == 'disable_notifications':
        await call.message.edit_text('–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n'
                                     '–í—ã —É–≤–µ—Ä–µ–Ω—ã?',
                                     reply_markup=confirm_unsubscribe_kb())
        await state.set_state(UserStates.confirm_unsubscribe)

@user_router.callback_query(UserStates.confirm_unsubscribe)
async def confirm_unsubscribe(call: CallbackQuery, state: FSMContext):
    if call.data == 'confirm_unsubscribe':
        await disable_notifications(call.from_user.id)
        await call.message.edit_text('–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                                     reply_markup=await main_menu_kb(call.from_user.id))
        await state.set_state(UserStates.menu)

    elif call.data == 'cancel_unsubscribe':
        await call.message.edit_text('–í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                                     reply_markup=await main_menu_kb(call.from_user.id))
        await state.set_state(UserStates.menu)

    elif call.data == 'go_back_fsm':
        await state.set_state(UserStates.control_subscribe)
        user_data = await get_user(call.from_user.id)
        frequency = user_data['notification_frequency']

        await call.message.edit_text(
            f'–°–µ–π—á–∞—Å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ {frequency} {"–¥–Ω–µ–π" if frequency == 7 else "–¥–µ–Ω—å"}',
            reply_markup=control_subscribe_kb(frequency))


@user_router.message(Command("events"))
async def show_events(message: Message):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤—ã—Ö 10 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
    period = 'week'
    events = await get_events(period)

    if not events:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    await send_events_batch(message, events, 0, period)


async def send_events_batch(message, events, page, period):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ 10 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    per_page = 10
    start_idx = page * per_page
    end_idx = start_idx + per_page
    batch = events[start_idx:end_idx]

    if not batch:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –±–æ–ª—å—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return

    for event in batch:
        date = event['date'].strftime('%d.%m.%Y')
        text = (f"üéü <b>{event['title']}</b>\n"
                f"‚≠êÔ∏è <b>{event['category']}</b>\n"
                f"üìÖ <b>{date}</b>\n"
                f"üìç <b>{event['location']}</b>\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {event['description']}\n"
                f"üîó <a href='{event['link']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n\n")

        await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
        await asyncio.sleep(0.5)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    total_pages = (len(events) + per_page - 1) // per_page  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    buttons = []

    if page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"events_page:{page - 1}:{period}"))
    if page < total_pages - 1:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"events_page:{page + 1}:{period}"))

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
    if buttons:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await message.answer(f"üìú –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}", reply_markup=keyboard)
    else:
        await message.answer(f"üìú –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}")


@user_router.callback_query(F.data.startswith("events_page:"))
async def paginate_events(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    page = int(callback.data.split(":")[1])
    period = callback.data.split(":")[2]
    events = await get_events(period)

    if page < 0 or page * 10 >= len(events):
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç –±–æ–ª—å—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", show_alert=True)
        return

    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await send_events_batch(callback.message, events, page, period)