import asyncio
import multiprocessing
from typing import List, Dict, Callable

from asyncpg import Record

from config import logger
from database.events_db import add_events, add_descriptions, get_events_without_description
from parse.ticketland.parse_events import get_all_events_ticketland
from parse.afisharu.parse_events import get_all_events_afisharu
from parse.afisharu.parse_description_of_events import get_descriptions_parallel, get_event_description
from parse.ticketland.parse_description_of_events import get_descriptions

def run_parallel(func: Callable, urls: List[str], num_processes: int = 2) -> Dict[str, str]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    chunk_size = max(1, len(urls) // num_processes)  # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏
    url_chunks = [urls[i:i + chunk_size] for i in range(0, len(urls), chunk_size)]

    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º {num_processes} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç {chunk_size} —Å—Å—ã–ª–æ–∫...")

    with multiprocessing.Pool(processes=num_processes) as pool:
        results = pool.starmap(func, [(i, chunk) for i, chunk in enumerate(url_chunks)])
        # results = pool.map(get_descriptions, url_chunks)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å
    merged_results = {}
    for result in results:
        if result:
            merged_results.update(result)

    return merged_results


async def parse_everyday_ticketland():
    all_events_list_of_dicts = get_all_events_ticketland()

    if all_events_list_of_dicts is not None:
        await add_events(all_events_list_of_dicts)

    list_of_records = await get_events_without_description()
    list_of_links = [record['source'] for record in list_of_records]

    if list_of_links is not None:
        description = run_parallel(list_of_links)
        await add_descriptions(description)

async def parse_everyday_afisharu():
    print('–ó–∞–ø—É—Å–∫ parse_everyday_afisharu')
    #
    # print('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
    # all_events_list_of_dicts = get_all_events_afisharu()
    # if all_events_list_of_dicts is not None:
    #     print('if all_events_list_of_dicts is not none: >>>')
    #     await add_events(all_events_list_of_dicts)
    #     print('add_events done')

    print('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
    list_of_records = await get_events_without_description()
    print('–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫')
    list_of_links = [record['source'] for record in list_of_records]

    if list_of_links is not None:
        print('–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–ø–∏—Å–∞–Ω–∏–π –≤ –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–µ')
        description = run_parallel(get_event_description, list_of_links)
        print('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –±–¥')
        await add_descriptions(description)


if __name__ == "__main__":
    asyncio.run(parse_everyday_afisharu())