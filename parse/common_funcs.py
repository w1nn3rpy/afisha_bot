import psutil

from config import logger

CATEGORY_MAPPING = {
    "–∫–æ–Ω—Ü–µ—Ä—Ç—ã": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "–∫–ª–∞—Å—Å–∏–∫–∞": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "—Ä–æ–∫": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "—Ç—è–∂–µ–ª—ã–π —Ä–æ–∫": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "–ø–æ–ø": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "–¥–∂–∞–∑": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "—à–∞–Ω—Å–æ–Ω": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "–∞–≤—Ç–æ—Ä—Å–∫–∞—è –ø–µ—Å–Ω—è": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "—Ö–∏–ø-—Ö–æ–ø": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "—Ñ–æ–ª–∫": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "—ç—Ç–Ω–æ": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "—ç—Å—Ç—Ä–∞–¥–∞": "–ö–æ–Ω—Ü–µ—Ä—Ç",

    "—Å–ø–µ–∫—Ç–∞–∫–ª–∏": "–¢–µ–∞—Ç—Ä",
    "–¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π": "–¢–µ–∞—Ç—Ä",
    "–º—é–∑–∏–∫–ª—ã": "–¢–µ–∞—Ç—Ä",
    "–∫–æ–º–µ–¥–∏—è": "–¢–µ–∞—Ç—Ä",

    "–≤—ã—Å—Ç–∞–≤–∫–∞": "–í—ã—Å—Ç–∞–≤–∫–∞",

    "—ç–∫—Å–∫—É—Ä—Å–∏–∏": "–≠–∫—Å–∫—É—Ä—Å–∏—è",

    "–¥–µ—Ç—è–º": "–î–ª—è –¥–µ—Ç–µ–π",
    "–¥–µ—Ç—Å–∫–∏–π": "–î–ª—è –¥–µ—Ç–µ–π",
    "–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è": "–î–ª—è –¥–µ—Ç–µ–π",

    "–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã": "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å",

    "–Ω–∞—É–∫–∞": "–ù–∞—É–∫–∞",

    "—à–æ—É": "–î—Ä—É–≥–æ–µ",
    "—Å—Ç–µ–Ω–¥–∞–ø": "–î—Ä—É–≥–æ–µ",
    "—é–º–æ—Ä": "–î—Ä—É–≥–æ–µ",
    "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–î—Ä—É–≥–æ–µ",
    "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ": "–î—Ä—É–≥–æ–µ"
}

def normalize_category(raw_categories: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    categories = raw_categories.lower().split(", ")  # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
    normalized = set()

    for category in categories:
        category = category.strip()
        if category in CATEGORY_MAPPING:
            normalized.add(CATEGORY_MAPPING[category])
        else:
            normalized.add("–î—Ä—É–≥–æ–µ")  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ "–î—Ä—É–≥–æ–µ"

    return ", ".join(sorted(normalized))  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ

from datetime import datetime, date
import re

def clean_date(date_text):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –¥–∞—Ç—É –∫ —Ñ–æ—Ä–º–∞—Ç—É date (YYYY-MM-DD)"""

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
    months_dict = {
        '—è–Ω–≤': '01', '—Ñ–µ–≤': '02', '–º–∞—Ä': '03', '–∞–ø—Ä': '04',
        '–º–∞—è': '05', '–∏—é–Ω': '06', '–∏—é–ª': '07', '–∞–≤–≥': '08',
        '—Å–µ–Ω': '09', '–æ–∫—Ç': '10', '–Ω–æ—è': '11', '–¥–µ–∫': '12'
    }

    # –£–±–∏—Ä–∞–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
    date_text = date_text.strip().replace("\xa0", " ")

    # –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º–∞—Ç–∞ "12 –º–∞—è" –∏–ª–∏ "17 –∞–ø—Ä"
    match = re.search(r"(\d{1,2})\s(\w+)", date_text)
    if match:
        day = match.group(1)  # –ß–∏—Å–ª–æ
        month = match.group(2)  # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—è—Ü –≤ —Å–ª–æ–≤–∞—Ä–µ
        if month in months_dict:
            month_number = months_dict[month]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
            current_year = datetime.now().year

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏ –¥–∞—Ç–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É
            event_date = date(current_year, int(month_number), int(day))
            today = date.today()

            # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            if event_date < today:
                event_date = date(current_year + 1, int(month_number), int(day))

            return event_date  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ date

    return None  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None



# –ú–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤ –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
MONTHS = {
    "—è–Ω–≤–∞—Ä—è": "01", "—Ñ–µ–≤—Ä–∞–ª—è": "02", "–º–∞—Ä—Ç–∞": "03", "–∞–ø—Ä–µ–ª—è": "04",
    "–º–∞—è": "05", "–∏—é–Ω—è": "06", "–∏—é–ª—è": "07", "–∞–≤–≥—É—Å—Ç–∞": "08",
    "—Å–µ–Ω—Ç—è–±—Ä—è": "09", "–æ–∫—Ç—è–±—Ä—è": "10", "–Ω–æ—è–±—Ä—è": "11", "–¥–µ–∫–∞–±—Ä—è": "12"
}


def find_nearest_date(date_str: str) -> date | None:
    """ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç `date`, –≤—ã–±–∏—Ä–∞—è –±–ª–∏–∂–∞–π—à—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ """

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–≤ 19:00")
    date_str = re.sub(r"\s+–≤\s+\d{1,2}:\d{2}", "", date_str)

    # –£–±–∏—Ä–∞–µ–º "–∏" –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "12, 19 –∏ 26 –º–∞—Ä—Ç–∞" ‚Üí ["12", "19", "26"])
    date_str = date_str.replace(" –∏ ", ", ")

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
    parts = date_str.split()
    if len(parts) < 2:
        return None  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π

    *days, month = parts  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ ‚Äî —ç—Ç–æ –º–µ—Å—è—Ü, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ‚Äî —á–∏—Å–ª–∞

    if month not in MONTHS:
        return None  # –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ

    current_date = date.today()
    current_year = current_date.year
    current_month = current_date.month
    month_num = int(MONTHS[month])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–¥ (–µ—Å–ª–∏ –º–µ—Å—è—Ü —É–∂–µ –ø—Ä–æ—à–µ–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥)
    year = current_year if month_num >= current_month else current_year + 1

    # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É
    valid_dates = []
    for day in days:
        try:
            event_date = date(year, month_num, int(day))
            if event_date >= current_date:
                valid_dates.append(event_date)
        except ValueError:
            continue

    if not valid_dates:
        return None  # –ï—Å–ª–∏ –Ω–µ—Ç –±—É–¥—É—â–∏—Ö –¥–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    return min(valid_dates)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ date


def log_memory_usage():
    mem = psutil.virtual_memory()
    logger.info(f"üìä –ü–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Chrome: {mem.available / (1024 * 1024)} MB —Å–≤–æ–±–æ–¥–Ω–æ")