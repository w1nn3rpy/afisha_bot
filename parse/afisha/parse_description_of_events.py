import asyncio
import os
import random
import tempfile
import time
import traceback
from typing import Dict, List

import requests
import undetected_chromedriver as uc
from asyncpg import Record
from bs4 import BeautifulSoup
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from config import logger
from database.events_db import delete_event_by_url


def init_driver(process_id):
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    user_data_dir = tempfile.mkdtemp(prefix=f"chrome_profile_{process_id}_")

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è undetected_chromedriver
    uc_patcher_dir = f"/root/git/afisha_bot/chromedriver{process_id}"
    os.makedirs(uc_patcher_dir, exist_ok=True)

    # # –ï—Å–ª–∏ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ —É–∂–µ –µ—Å—Ç—å —Ñ–∞–π–ª –¥—Ä–∞–π–≤–µ—Ä–∞ ‚Äî —É–¥–∞–ª—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    existing_driver = os.path.join(uc_patcher_dir, "chromedriver")
    # if os.path.exists(existing_driver):
    #     try:
    #         os.remove(existing_driver)
    #     except Exception:
    #         pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –µ–≥–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç

    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞."""
    options = uc.ChromeOptions()
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument(f"--user-data-dir={user_data_dir}")

    port = 9222 + process_id  # –†–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

    driver = uc.Chrome(options=options,
                       driver_executable_path=existing_driver,
                       port=port,
                       use_subprocess=True)

    # driver = uc.Chrome(options=options,
    #                    driver_executable_path=existing_driver if os.path.exists(existing_driver) else None,
    #                    use_subprocess=True)

    logger.info(f"[{process_id}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞...")

    return driver

def get_descriptions(process_id, list_of_links: List[str]) -> Dict[str, str] | None:

    descriptions = {url: '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è' for url in list_of_links}

    all_count = len(list_of_links)
    current_count = 0

    # üñ• –ó–∞–ø—É—Å–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è Xvfb (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
    os.system("Xvfb :99 -screen 0 1920x1080x24 &")
    os.environ["DISPLAY"] = ":99"

    try:
        logger.info(f"[{os.getpid()}] [INFO] –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        driver = init_driver(process_id)
        for url, description in descriptions.items():
            attempts = 0
            max_attempts = 5

            while attempts < max_attempts:
                try:
                    logger.info(f"{current_count}/{all_count} [{os.getpid()}] [INFO] –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
                    driver.get(url)

                    # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    WebDriverWait(driver, 20).until(
                        EC.presence_of_element_located((By.TAG_NAME, "body"))
                    )
                    logger.info(f"[{os.getpid()}] [INFO] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

                    # –ò—â–µ–º –±–ª–æ–∫ –æ–ø–∏—Å–∞–Ω–∏—è
                    description_block = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "div.formatted-text.mts-text"))
                    )

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞
                    soup = BeautifulSoup(description_block.get_attribute("innerHTML"), "html.parser")

                    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü <p> –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
                    first_paragraph = soup.find("p")

                    if first_paragraph:
                        description = first_paragraph.text.strip()

                    logger.info(f"[{os.getpid()}] [INFO] –û–ø–∏—Å–∞–Ω–∏–µ: {description}")

                    if len(description) > 5:
                        descriptions[url] = description
                    else:
                        logger.info(f"[{os.getpid()}] [INFO] –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'")

                    break

                except Exception as e:
                    attempts += 1
                    logger.error(f"[{os.getpid()}] [ERROR {attempts}/{max_attempts}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
                    status_code = driver.execute_script("return document.readyState")  # "complete" = 200 OK
                    logger.info(f"[{os.getpid()}] [INFO] –°—Ç–∞—Ç—É—Å-–∫–æ–¥ {url}: {status_code}")

                    if attempts > 3 and status_code != 'complete':
                        asyncio.run(delete_event_by_url(url))
                        logger.warning(f"[{os.getpid()}] [WARNING] –°—Ç—Ä–∞–Ω–∏—Ü–∞ {url} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å! –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã.")
                        break

                    driver.quit()
                    time.sleep(5)
                    driver = init_driver()
                    logger.info(f'[{os.getpid()}] [INFO] –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω')
                    time.sleep(5)

            time.sleep(random.uniform(0.5, 2))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–∞–Ω–∞
            current_count += 1

        return descriptions

    except Exception as e:
        logger.error(f"[{os.getpid()}] [ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:")
        logger.error(traceback.format_exc())

    finally:
        if 'driver' in locals():
            driver.quit()
            logger.info(f"[{os.getpid()}] [INFO] –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç!")
