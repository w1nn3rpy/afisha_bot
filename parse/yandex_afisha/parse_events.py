import datetime
import os
import random
import shutil
import time
from typing import List, Dict
from bs4 import BeautifulSoup
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import undetected_chromedriver as uc


from config import logger
def create_base_urls():
    categories = ["concert", "theatre", "kids", "art", "standup", "excursions", "show", "quest", "masterclass", "lectures"]
    base_urls = [f"https://afisha.yandex.ru/tomsk/{cat}?source=menu&date={{}}&period=365&page={{}}" for cat in categories]
    return base_urls

types_of_event = {
    "concert": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "theatre": "–¢–µ–∞—Ç—Ä",
    "kids": "–î–ª—è –¥–µ—Ç–µ–π",
    "art": "–í—ã—Å—Ç–∞–≤–∫–∞",
    "standup": "–î—Ä—É–≥–æ–µ",
    "excursions": "–≠–∫—Å–∫—É—Ä—Å–∏—è",
    "show": "–î—Ä—É–≥–æ–µ",
    "quest": "–î—Ä—É–≥–æ–µ",
    "masterclass": "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å",
    "lectures": "–ù–∞—É–∫–∞"
}

def scroll_down(driver):
    """–ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    last_height = driver.execute_script("return document.body.scrollHeight")
    while True:
        driver.execute_script("window.scrollBy(0, window.innerHeight / 2);")  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –Ω–∞ 50% —ç–∫—Ä–∞–Ω–∞
        time.sleep(random.uniform(1, 2))  # –ñ–¥—ë–º –ø–æ–¥–≥—Ä—É–∑–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == last_height:
            break  # –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        last_height = new_height

def init_driver():

    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    CHROME_PATH = shutil.which("google-chrome") or shutil.which("google-chrome-stable")
    if not CHROME_PATH:
        raise FileNotFoundError(
            "Google Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ 'sudo apt install google-chrome-stable'.")

    CHROMEDRIVER_PATH = shutil.which("chromedriver")
    if not CHROMEDRIVER_PATH:
        raise FileNotFoundError("ChromeDriver –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.")

    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞."""
    options = uc.ChromeOptions()
    options.add_argument("user-data-dir=/home/user/.config/google-chrome")
    options.add_argument("profile-directory=Default")

    options.add_argument("--disable-blink-features=AutomationControlled")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    options.add_argument("--disable-gpu")  # –û—Ç–∫–ª—é—á–∞–µ–º GPU, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    options.add_argument("--no-sandbox")  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –ø–µ—Å–æ—á–Ω–∏—Ü—ã (–Ω—É–∂–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö)
    options.add_argument("--disable-dev-shm-usage")  # –ò–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–∑–¥–µ–ª—è–µ–º–æ–π –ø–∞–º—è—Ç—å—é (–Ω–∞ Linux)
    options.add_argument("--disable-infobars")  # –£–±–∏—Ä–∞–µ–º "Chrome is being controlled by automated test software"
    options.add_argument("--disable-popup-blocking")  # –û—Ç–∫–ª—é—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
    options.add_argument("--remote-debugging-port=9222")  # –í–∫–ª—é—á–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—É—é –æ—Ç–ª–∞–¥–∫—É
    options.add_argument("--start-maximized")  # –ó–∞–ø—É—Å–∫ –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–π—Ç—ã –∏–Ω–∞—á–µ –≤–µ–¥—É—Ç —Å–µ–±—è –ø–æ-–¥—Ä—É–≥–æ–º—É)
    options.add_argument("--disable-extensions")  # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã
    options.add_argument("--disable-background-timer-throttling")  # –û—Ç–∫–ª—é—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    options.add_argument("--disable-backgrounding-occluded-windows")  # –ò–∑–±–µ–≥–∞–µ–º –∑–∞–º–µ–¥–ª–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –≤ —Ñ–æ–Ω–µ
    options.add_argument("--blink-settings=imagesEnabled=false")  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞)
    options.add_argument("--mute-audio")  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –º–µ–¥–∏–∞)

    # # –ü–æ–¥–º–µ–Ω—è–µ–º user-agent (—á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ–ª –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä)
    # options.add_argument(
    #     "user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
    # )

    driver = uc.Chrome(options=options,
                       use_subprocess=True)

    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞...")

    return driver

def get_all_events_yandex_afisha() -> List[Dict]:
    all_events = []
    today = datetime.date.today()

    # üñ• –ó–∞–ø—É—Å–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è Xvfb (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
    display_num = 99  # –†–∞–∑–Ω—ã–µ Xvfb –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    os.system(f"Xvfb :{display_num} -screen 0 1920x1080x24 &")
    os.environ["DISPLAY"] = f":{display_num}"

    driver = init_driver()
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")

    # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç
    driver.get("https://www.whatismybrowser.com/")

    # for link_of_type_event in create_base_urls():
    #     category_key = link_of_type_event.split('/')[-1].split('?')[0]
    #     category = types_of_event.get(category_key, '–î—Ä—É–≥–æ–µ')
    #     attempt = 0
    #     max_attempts = 3
    #
    #     while attempt < max_attempts:
    #         try:
    #             events = []
    #             page = 1
    #
    #             while True:
    #                 url = link_of_type_event.format(today, page)
    #
    #                 logger.info(f"üîç –ü–∞—Ä—Å–∏–º [{category}], —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}...")
    #                 driver.get(url)
    #                 time.sleep(random.uniform(3, 6))
    #
    #                 scroll_down(driver)
    #
    #                 WebDriverWait(driver, 10).until(
    #                     EC.presence_of_element_located((By.TAG_NAME, "body"))
    #                 )
    #                 driver.execute_script("window.scrollTo(0, document.body.scrollHeight / 3);")
    #                 time.sleep(random.uniform(1, 2))
    #
    #                 driver.execute_script("window.scrollTo(0, document.body.scrollHeight / 1.5);")
    #                 time.sleep(random.uniform(1, 2))
    #
    #                 driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    #                 time.sleep(random.uniform(2, 4))
    #
    #                 soup = BeautifulSoup(driver.page_source, "html.parser")
    #                 print(soup.text)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã —É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    #
    #                 event_cards = soup.find_all("div", class_="event events-list__item yandex-sans")
    #                 if not event_cards:
    #                     logger.info("‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    #                     break
    #
    #                 for event in event_cards:
    #                     try:
    #                         title = event.find("h2", class_="Title-fq4hbj-3").text.strip()
    #                         date = event.find("li", class_="DetailsItem-fq4hbj-1").text.strip()
    #                         place = event.find("a", class_="PlaceLink-fq4hbj-2").text.strip()
    #                         link_tag = event.find("a", class_="EventLink-sc-1x07jll-2")
    #                         link = f"https://afisha.yandex.ru{link_tag['href']}" if link_tag else ""
    #
    #                         event_data = {
    #                             "title": title,
    #                             "category": category,
    #                             "date": date,
    #                             "venue": place,
    #                             "link": link,
    #                         }
    #
    #                         if title and date and place and link:
    #                             events.append(event_data)
    #
    #                     except AttributeError:
    #                         continue
    #
    #                 all_events.extend(events)
    #                 page += 1
    #                 time.sleep(1)  # –ú–µ–Ω—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    #
    #             break  # –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤—ã—Ö–æ–¥–∏–º –∏–∑ while
    #         except Exception as e:
    #             attempt += 1
    #             logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): {e}")
    #             time.sleep(5)
    #
    #             driver.quit()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
    #             driver = init_driver()
    #             logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")

    driver.quit()
    return all_events

if __name__ == "__main__":
    results = get_all_events_yandex_afisha()
    if results:
        for event in results[:5]:  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            print(event)
