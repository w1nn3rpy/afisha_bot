import asyncio
import os
import random
import shutil
import time
import traceback
import tempfile
from typing import List, Dict

import undetected_chromedriver as uc
from selenium.common import NoSuchElementException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
from config import logger
from database.events_db import delete_event_by_url
from parse.common_funcs import log_memory_usage
from parse.yandex_afisha.parse_events import scroll_down


# def init_driver(process_id):
#
#     # """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
#     # CHROME_PATH = shutil.which("google-chrome") or shutil.which("google-chrome-stable")
#     # if not CHROME_PATH:
#     #     raise FileNotFoundError(
#     #         "Google Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ 'sudo apt install google-chrome-stable'.")
#     #
#     # CHROMEDRIVER_PATH = shutil.which("chromedriver")
#     # if not CHROMEDRIVER_PATH:
#     #     raise FileNotFoundError("ChromeDriver –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.")
#
#     # # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è undetected_chromedriver
#     # uc_patcher_dir = f"/usr/src/app/chromedriver{process_id}"
#     # os.makedirs(uc_patcher_dir, exist_ok=True)
#
#     # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è undetected_chromedriver
#     uc_patcher_dir = f"/root/git/afisha_bot/chromedriver{process_id}"
#     os.makedirs(uc_patcher_dir, exist_ok=True)
#
#     existing_driver = os.path.join(uc_patcher_dir, "chromedriver")
#
#
#     """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞."""
#     options = uc.ChromeOptions()
#     options.add_argument(f"user-data-dir=/home/user/.config/google-chrome{process_id}")
#     options.add_argument("profile-directory=Default")
#
#     options.add_argument("--disable-blink-features=AutomationControlled")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
#     options.add_argument("--disable-gpu")  # –û—Ç–∫–ª—é—á–∞–µ–º GPU, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
#     options.add_argument("--no-sandbox")  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –ø–µ—Å–æ—á–Ω–∏—Ü—ã (–Ω—É–∂–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö)
#     options.add_argument("--disable-dev-shm-usage")  # –ò–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–∑–¥–µ–ª—è–µ–º–æ–π –ø–∞–º—è—Ç—å—é (–Ω–∞ Linux)
#     options.add_argument("--disable-infobars")  # –£–±–∏—Ä–∞–µ–º "Chrome is being controlled by automated test software"
#     options.add_argument("--disable-popup-blocking")  # –û—Ç–∫–ª—é—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
#     options.add_argument("--remote-debugging-port=9222")  # –í–∫–ª—é—á–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—É—é –æ—Ç–ª–∞–¥–∫—É
#     options.add_argument("--start-maximized")  # –ó–∞–ø—É—Å–∫ –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–π—Ç—ã –∏–Ω–∞—á–µ –≤–µ–¥—É—Ç —Å–µ–±—è –ø–æ-–¥—Ä—É–≥–æ–º—É)
#     options.add_argument("--disable-extensions")  # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã
#     options.add_argument("--disable-background-timer-throttling")  # –û—Ç–∫–ª—é—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
#     options.add_argument("--disable-backgrounding-occluded-windows")  # –ò–∑–±–µ–≥–∞–µ–º –∑–∞–º–µ–¥–ª–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –≤ —Ñ–æ–Ω–µ
#     options.add_argument("--blink-settings=imagesEnabled=false")  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞)
#     options.add_argument("--mute-audio")  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –º–µ–¥–∏–∞)
#
#     # –ü–æ–¥–º–µ–Ω—è–µ–º user-agent (—á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ–ª –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä)
#     options.add_argument(
#         "user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
#     )
#
#     port = 9222 + process_id  # –†–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
#
#
#     driver = uc.Chrome(options=options,
#                        driver_executable_path=existing_driver,
#                        port=port,
#                        use_subprocess=True)
#
#     logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞...")
#
#     return driver

def init_driver():

    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    CHROME_PATH = shutil.which("google-chrome") or shutil.which("google-chrome-stable")
    if not CHROME_PATH:
        raise FileNotFoundError(
            "Google Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ 'sudo apt install google-chrome-stable'.")

    CHROMEDRIVER_PATH = shutil.which("chromedriver")
    if not CHROMEDRIVER_PATH:
        raise FileNotFoundError("ChromeDriver –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.")

    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞."""
    options = uc.ChromeOptions()
    options.add_argument("user-data-dir=/home/user/.config/google-chrome")
    options.add_argument("profile-directory=Default")

    options.add_argument("--disable-blink-features=AutomationControlled")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    options.add_argument("--disable-gpu")  # –û—Ç–∫–ª—é—á–∞–µ–º GPU, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    options.add_argument("--no-sandbox")  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –ø–µ—Å–æ—á–Ω–∏—Ü—ã (–Ω—É–∂–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö)
    options.add_argument("--disable-dev-shm-usage")  # –ò–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–∑–¥–µ–ª—è–µ–º–æ–π –ø–∞–º—è—Ç—å—é (–Ω–∞ Linux)
    options.add_argument("--disable-infobars")  # –£–±–∏—Ä–∞–µ–º "Chrome is being controlled by automated test software"
    options.add_argument("--disable-popup-blocking")  # –û—Ç–∫–ª—é—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
    options.add_argument("--remote-debugging-port=9222")  # –í–∫–ª—é—á–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—É—é –æ—Ç–ª–∞–¥–∫—É
    options.add_argument("--start-maximized")  # –ó–∞–ø—É—Å–∫ –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–π—Ç—ã –∏–Ω–∞—á–µ –≤–µ–¥—É—Ç —Å–µ–±—è –ø–æ-–¥—Ä—É–≥–æ–º—É)
    options.add_argument("--disable-extensions")  # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã
    options.add_argument("--disable-background-timer-throttling")  # –û—Ç–∫–ª—é—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    options.add_argument("--disable-backgrounding-occluded-windows")  # –ò–∑–±–µ–≥–∞–µ–º –∑–∞–º–µ–¥–ª–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –≤ —Ñ–æ–Ω–µ
    options.add_argument("--blink-settings=imagesEnabled=false")  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞)
    options.add_argument("--mute-audio")  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –º–µ–¥–∏–∞)

    # –ü–æ–¥–º–µ–Ω—è–µ–º user-agent (—á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ–ª –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä)
    options.add_argument(
        "user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
    )

    driver = uc.Chrome(options=options,
                       use_subprocess=True)

    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞...")

    return driver

def get_event_description_yandex_afisha(list_of_links: List[str]) -> Dict[str, str] | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —Å—Å—ã–ª–∫–µ."""

    descriptions = {url: '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è' for url in list_of_links}


    all_count = len(list_of_links)
    current_count = 1

    # üñ• –ó–∞–ø—É—Å–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è Xvfb (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
    display_num = 99  # –†–∞–∑–Ω—ã–µ Xvfb –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    os.system(f"Xvfb :{display_num} -screen 0 1920x1080x24 &")
    os.environ["DISPLAY"] = f":{display_num}"

    driver = init_driver()
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")

    try:
        for url, description in descriptions.items():
            log_memory_usage()

            attempts = 1
            max_attempts = 5

            while attempts < max_attempts:

                logger.info(f"[INFO] ‚ÑπÔ∏è  {current_count}/{all_count} –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
                driver.get(url)
                time.sleep(random.uniform(3, 6))

                scroll_down(driver)

                WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                logger.info(f"[INFO] ‚ÑπÔ∏è  –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

                driver.execute_script("window.scrollTo(0, document.body.scrollHeight / 3);")
                time.sleep(random.uniform(1, 2))

                driver.execute_script("window.scrollTo(0, document.body.scrollHeight / 1.5);")
                time.sleep(random.uniform(1, 2))

                driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(random.uniform(2, 4))

                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º "–û—à–∏–±–∫–∞ 404" –≤ error-page__body
                    error_body = driver.find_element(By.CSS_SELECTOR, "body.error-page__body")
                    error_text = error_body.find_element(By.CSS_SELECTOR, "div.ErrorTitle-wvicct-11").text

                    if "–û—à–∏–±–∫–∞ 404" in error_text or "–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error_text:
                        logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 404! –£–¥–∞–ª—è–µ–º {url}")
                        asyncio.run(delete_event_by_url(url))
                        break

                except NoSuchElementException:
                    pass  # –û—à–∏–±–∫–∏ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

                try:
                    # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    description_block = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "div[data-test-id='eventInfo.description']"))
                    )

                    soup = BeautifulSoup(description_block.get_attribute("innerHTML"), "html.parser")

                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ div class="tlWAxz"
                    description_element = soup.find("div", class_="tlWAxz")

                    if description_element:
                        new_description = description_element.text.strip()
                        logger.info(f"[INFO] ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {new_description}")

                        if len(new_description) > 5:
                            descriptions[url] = new_description
                        else:
                            logger.info(f"[INFO] ‚ÑπÔ∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'")

                    else:
                        logger.warning(f"‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                        descriptions[url] = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

                    break

                except Exception as e:
                    attempts += 1
                    logger.error(f"[ERROR {attempts}/{max_attempts}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")

                    if attempts > 3:
                        asyncio.run(delete_event_by_url(url))
                        logger.warning(f"[WARNING] ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {url} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å! –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã.")
                        break

                    driver.quit()
                    time.sleep(5)
                    driver = init_driver()
                    logger.info(f'[INFO] ‚ÑπÔ∏è  –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω')
                    time.sleep(5)

            time.sleep(random.uniform(0.5, 2))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–∞–Ω–∞
            current_count += 1
        logger.info(f'[INFO] ‚ÑπÔ∏è  –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π descriptions')
        return descriptions

    except Exception as e:
        logger.error(f"[ERROR] ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:")
        logger.error(traceback.format_exc())
        return descriptions

    finally:

        if 'driver' in locals():
            driver.quit()
            logger.info(f"[INFO] ‚ÑπÔ∏è  –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç!")
