import asyncio
import os
import random
import time
import traceback
import tempfile
from typing import List, Dict

import undetected_chromedriver as uc
from selenium.common import NoSuchElementException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
from config import logger
from database.events_db import delete_event_by_url
from parse.common_funcs import log_memory_usage


def init_driver(process_id):
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    user_data_dir = tempfile.mkdtemp(prefix=f"chrome_profile_{process_id}_")

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è undetected_chromedriver
    uc_patcher_dir = f"/usr/src/app/chromedriver{process_id}"
    os.makedirs(uc_patcher_dir, exist_ok=True)

    existing_driver = os.path.join(uc_patcher_dir, "chromedriver")

    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞."""
    options = uc.ChromeOptions()
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument(f"--user-data-dir={user_data_dir}")
    options.add_argument("--profile-directory=Default")
    prefs = {
        "profile.managed_default_content_settings.images": 2,  # –í—ã–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç–∏–Ω–æ–∫
        "profile.default_content_setting_values.notifications": 2,  # –í—ã–∫–ª—é—á–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞
        "profile.default_content_setting_values.geolocation": 2,  # –ó–∞–ø—Ä–µ—â–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    }
    options.add_experimental_option("prefs", prefs)
    options.add_argument("--blink-settings=imagesEnabled=false")  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    port = 9222 + process_id  # –†–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

    driver = uc.Chrome(options=options,
                       driver_executable_path=existing_driver,
                       port=port,
                       use_subprocess=True)

    logger.info(f"[{process_id}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞...")

    return driver

def get_event_description_yandex_afisha(process_id, list_of_links: List[str]) -> Dict[str, str] | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —Å—Å—ã–ª–∫–µ."""

    descriptions = {url: '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è' for url in list_of_links}


    all_count = len(list_of_links)
    current_count = 1

    # üñ• –ó–∞–ø—É—Å–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è Xvfb (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
    display_num = 99 + process_id  # –†–∞–∑–Ω—ã–µ Xvfb –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    os.system(f"Xvfb :{display_num} -screen 0 1920x1080x24 &")
    os.environ["DISPLAY"] = f":{display_num}"

    driver = init_driver(process_id)
    try:
        for url, description in descriptions.items():
            log_memory_usage()

            attempts = 1
            max_attempts = 5

            while attempts < max_attempts:

                logger.info(f"[{process_id}] [INFO] ‚ÑπÔ∏è  {current_count}/{all_count} –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
                driver.get(url)
                WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                logger.info(f"[{process_id}] [INFO] ‚ÑπÔ∏è  –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º "–û—à–∏–±–∫–∞ 404" –≤ error-page__body
                    error_body = driver.find_element(By.CSS_SELECTOR, "body.error-page__body")
                    error_text = error_body.find_element(By.CSS_SELECTOR, "div.ErrorTitle-wvicct-11").text

                    if "–û—à–∏–±–∫–∞ 404" in error_text or "–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error_text:
                        logger.warning(f"[{process_id}] ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 404! –£–¥–∞–ª—è–µ–º {url}")
                        asyncio.run(delete_event_by_url(url))
                        break

                except NoSuchElementException:
                    pass  # –û—à–∏–±–∫–∏ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

                try:
                    # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    description_block = WebDriverWait(driver, 20).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "div[data-test-id='eventInfo.description']"))
                    )

                    soup = BeautifulSoup(description_block.get_attribute("innerHTML"), "html.parser")

                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ div class="tlWAxz"
                    description_element = soup.find("div", class_="tlWAxz")

                    if description_element:
                        new_description = description_element.text.strip()
                        logger.info(f"[{process_id}] [INFO] ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {new_description}")

                        if len(new_description) > 5:
                            descriptions[url] = new_description
                        else:
                            logger.info(f"[{process_id}] [INFO] ‚ÑπÔ∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'")

                    else:
                        logger.warning(f"[{process_id}] ‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                        descriptions[url] = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

                    break

                except Exception as e:
                    attempts += 1
                    logger.error(f"[{process_id}] [ERROR {attempts}/{max_attempts}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")

                    if attempts > 3:
                        asyncio.run(delete_event_by_url(url))
                        logger.warning(f"[{process_id}] [WARNING] ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {url} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å! –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã.")
                        break

                    driver.delete_all_cookies()
                    driver.quit()
                    time.sleep(5)
                    driver = init_driver(process_id)
                    logger.info(f'[{process_id}] [INFO] ‚ÑπÔ∏è  –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω')
                    time.sleep(5)

            time.sleep(random.uniform(0.5, 2))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–∞–Ω–∞
            current_count += 1
        logger.info(f'[{process_id}] [INFO] ‚ÑπÔ∏è  –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π descriptions')
        return descriptions

    except Exception as e:
        logger.error(f"[{process_id}] [ERROR] ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:")
        logger.error(traceback.format_exc())
        return descriptions

    finally:

        if 'driver' in locals():
            driver.quit()
            logger.info(f"[{process_id}] [INFO] ‚ÑπÔ∏è  –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç!")
