# https://gorodzovet.ru/tomsk/
import datetime
import time
import shutil
from typing import List

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
from config import logger
from parse.common_funcs import normalize_category_gorodzovet

BASE_URL = 'https://gorodzovet.ru'

str_categories = {
    # –í—ã—Å—Ç–∞–≤–∫–∞
    '–≤—ã—Å—Ç–∞–≤–∫–∞': '–í—ã—Å—Ç–∞–≤–∫–∞',
    '—ç–∫—Å–ø–æ–∑–∏—Ü–∏—è': '–í—ã—Å—Ç–∞–≤–∫–∞',
    '–∞—Ä—Ç': '–í—ã—Å—Ç–∞–≤–∫–∞',
    '–≥–∞–ª–µ—Ä–µ—è': '–í—ã—Å—Ç–∞–≤–∫–∞',
    '–∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏—è': '–í—ã—Å—Ç–∞–≤–∫–∞',

    # –¢–µ–∞—Ç—Ä
    '—Å–ø–µ–∫—Ç–∞–∫–ª—å': '–¢–µ–∞—Ç—Ä',
    '—Å—Ü–µ–Ω–∫–∞': '–¢–µ–∞—Ç—Ä',
    '–ø—å–µ—Å–∞': '–¢–µ–∞—Ç—Ä',
    '–¥—Ä–∞–º–∞': '–¢–µ–∞—Ç—Ä',
    '–∫–æ–º–µ–¥–∏—è': '–¢–µ–∞—Ç—Ä',
    '—Ç—Ä–∞–≥–µ–¥–∏—è': '–¢–µ–∞—Ç—Ä',
    '–º–æ–Ω–æ—Å–ø–µ–∫—Ç–∞–∫–ª—å': '–¢–µ–∞—Ç—Ä',
    '—Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–π': '–¢–µ–∞—Ç—Ä',

    # –î–ª—è –¥–µ—Ç–µ–π
    '–¥–µ—Ç—Å–∫–∏–π': '–î–ª—è –¥–µ—Ç–µ–π',
    '–¥–ª—è –¥–µ—Ç–µ–π': '–î–ª—è –¥–µ—Ç–µ–π',
    '–º–∞–ª—ã—à': '–î–ª—è –¥–µ—Ç–µ–π',
    '—Ä–µ–±—ë–Ω–æ–∫': '–î–ª—è –¥–µ—Ç–µ–π',
    '–∞–Ω–∏–º–∞—Ü–∏—è': '–î–ª—è –¥–µ—Ç–µ–π',
    '–º—É–ª—å—Ç—Ñ–∏–ª—å–º': '–î–ª—è –¥–µ—Ç–µ–π',
    '–¥–µ—Ç—è–º': '–î–ª—è –¥–µ—Ç–µ–π',
    '—Å–µ–º–µ–π–Ω—ã–π': '–î–ª—è –¥–µ—Ç–µ–π',

    # –≠–∫—Å–∫—É—Ä—Å–∏—è
    '—ç–∫—Å–∫—É—Ä—Å–∏—è': '–≠–∫—Å–∫—É—Ä—Å–∏—è',
    '—Ç—É—Ä': '–≠–∫—Å–∫—É—Ä—Å–∏—è',
    '–ø—Ä–æ–≥—É–ª–∫–∞': '–≠–∫—Å–∫—É—Ä—Å–∏—è',
    '–æ–±–∑–æ—Ä–Ω–∞—è': '–≠–∫—Å–∫—É—Ä—Å–∏—è',
    '–ø–æ—Ö–æ–¥': '–≠–∫—Å–∫—É—Ä—Å–∏—è',
    '–º–∞—Ä—à—Ä—É—Ç': '–≠–∫—Å–∫—É—Ä—Å–∏—è',

    # –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
    '–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å',
    '–º–∞—Å—Ç–µ—Ä–∫–ª–∞—Å—Å': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å',
    '–æ–±—É—á–µ–Ω–∏–µ': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å',
    '–∫—É—Ä—Å': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å',
    '—Ç—Ä–µ–Ω–∏–Ω–≥': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å',
    '–≤–æ—Ä–∫—à–æ–ø': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å',
    '–∑–∞–Ω—è—Ç–∏–µ': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å'
}


def get_links() -> List[str]:
    today = datetime.date.today()
    days = []

    for i in range(31):
        days.append(today + datetime.timedelta(days=i))

    urls = [f'https://gorodzovet.ru/tomsk/day{day}/' for day in days]

    return urls



def init_driver():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    CHROME_PATH = shutil.which("google-chrome") or shutil.which("google-chrome-stable")
    if not CHROME_PATH:
        raise FileNotFoundError(
            "Google Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ 'sudo apt install google-chrome-stable'.")

    CHROMEDRIVER_PATH = shutil.which("chromedriver")
    if not CHROMEDRIVER_PATH:
        raise FileNotFoundError("ChromeDriver –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.")

    chrome_options = Options()
    chrome_options.binary_location = CHROME_PATH
    chrome_options.add_argument("--headless")  # –ë–µ–∑ GUI
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")

    service = Service(CHROMEDRIVER_PATH)
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver

def get_all_events_gorodzovet(urls: List[str]) -> List[dict] | None:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –ê—Ñ–∏—à–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∞—à–µ–π."""
    attempt = 0
    max_attempts = 3
    while attempt < max_attempts:
        try:
            driver = init_driver()
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")

            events = []
            for url in urls:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {len(events)}\nüîç –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {url}...")

                driver.get(url)
                time.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                soup = BeautifulSoup(driver.page_source, "html.parser")

                page_events = []
                event_blocks = soup.find_all("div", class_="event-block")

                if not event_blocks:
                    logger.info("‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                    break

                for event in event_blocks:
                    title_tag = event.find("h3", class_="lines lines2")
                    category_tags = event.find("div", class_="event-tags")
                    date_venue_tag = event.find("span", class_="event-day innlink")
                    href_tag = event.find("div", class_="innlink event-link save-click")

                    if not title_tag or not date_venue_tag:
                        logger.error('SKIP')
                        continue  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                    title = title_tag.text.strip()
                    event_link = f"https://www.gorodzovet.ru{href_tag['data-link']}"
                    category = ''
                    try:
                        for word in title.split():
                            if word.lower() in str_categories:
                                category = str_categories.get(word.lower())
                                break
                            else:
                                category = normalize_category_gorodzovet(category_tags.text.strip()) if category_tags else "–î—Ä—É–≥–æ–µ"
                    except Exception as e:
                        logger.error(f'–û–®–ò–ë–ö–ê: {e}')

                    date = datetime.datetime.strptime(date_venue_tag['data-link'].split("day")[-1].strip("/"), "%Y/%m/%d").date()

                    event_data = {
                        "title": title,
                        "date": date,
                        "category": category,
                        "venue": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                        "link": event_link,
                    }
                    logger.info(f'–°–æ–±—ã—Ç–∏–µ: {title}\n'
                                f'–î–∞—Ç–∞: {date}\n'
                                f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n'
                                f'–°—Å—ã–ª–∫–∞: {href_tag["data-link"]}\n')

                    if date and title and category and event_link:
                        page_events.append(event_data)

                events.extend(page_events)
                time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

            driver.quit()
            return events

        except Exception as e:
            attempt += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): {e}")
            time.sleep(5)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

            if 'driver' in locals():
                driver.quit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
                logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")

    return events
