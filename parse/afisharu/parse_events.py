# https://www.afisha.ru/tomsk/events/performances/exhibitions/concerts/

import re
import time
import shutil
from typing import List
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
from config import logger

BASE_URL = "https://www.afisha.ru/tomsk/events/page{}/performances/exhibitions/concerts/"


def get_all_events_afisharu() -> List[dict] | None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Google Chrome
    CHROME_PATH = shutil.which("google-chrome") or shutil.which("google-chrome-stable")
    if not CHROME_PATH:
        raise FileNotFoundError(
            "Google Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ 'sudo apt install google-chrome-stable'.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ChromeDriver
    CHROMEDRIVER_PATH = shutil.which("chromedriver")
    if not CHROMEDRIVER_PATH:
        raise FileNotFoundError("ChromeDriver –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium
    chrome_options = Options()
    chrome_options.binary_location = CHROME_PATH
    chrome_options.add_argument("--headless")  # –ë–µ–∑ GUI
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")

    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        service = Service(CHROMEDRIVER_PATH)
        driver = webdriver.Chrome(service=service, options=chrome_options)

        events = []
        page = 1

        while True:
            url = BASE_URL.format(page)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {len(events)}\nüîç –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...")

            driver.get(url)
            soup = BeautifulSoup(driver.page_source, "html.parser")

            page_events = []
            for event in soup.find_all("div", class_="oP17O"):
                title_tag = event.find("a", class_="CjnHd y8A5E nbCNS yknrM")
                category_tag = event.find("div", class_="S_wwn")
                date_venue_tag = event.find("div", class_="_JP4u")
                link_tag = event.find("a", class_="CjnHd y8A5E Vrui1")

                if title_tag and date_venue_tag:
                    title = title_tag.text.strip()
                    event_link = f"https://www.afisha.ru{title_tag['href']}"
                    category = category_tag.text.strip() if category_tag else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    date_venue_text = date_venue_tag.text.strip()

                    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
                    date_venue_split = date_venue_text.split(", ")
                    date = date_venue_split[0] if len(date_venue_split) > 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    venue = date_venue_split[1] if len(date_venue_split) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    event_data = {
                        "title": title,
                        "date": date,
                        "category": category,
                        "venue": venue,
                        "link": event_link,
                    }
                    page_events.append(event_data)

            if not page_events:
                logger.info("‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                break

            events.extend(page_events)
            page += 1
            time.sleep(2)

        return events

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return None

    finally:
        if 'driver' in locals():
            driver.quit()
        logger.info("üõë –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")


if __name__ == "__main__":
    results = get_all_events_afisharu()
    if results:
        for event in results[:5]:  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            print(event)
