import asyncio
import random
import re
import time
import shutil
import multiprocessing
import traceback
from typing import List, Dict
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
from config import logger
from database.events_db import delete_event_by_url
from parse.afisharu.parse_events import init_driver


def get_event_description(process_id, list_of_links: List[str]) -> Dict[str, str] | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —Å—Å—ã–ª–∫–µ."""

    descriptions = {url: '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è' for url in list_of_links}


    all_count = len(list_of_links)
    current_count = 0

    driver = init_driver()
    try:
        for url, description in descriptions.items():
            attempts = 0
            max_attempts = 5

            while attempts < max_attempts:

                logger.info(f"[{process_id}] [INFO] {current_count}/{all_count} –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
                driver.get(url)
                WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                logger.info(f"[{process_id}] [INFO] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

                try:
                    error_element = driver.find_element(By.CSS_SELECTOR, "h1.error-page__title")
                    if "–î–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!" in error_element.text:
                        logger.warning(f"[{process_id}] ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 404! –£–¥–∞–ª—è–µ–º {url}")
                        asyncio.run(delete_event_by_url(url))
                        break
                except:
                    pass  # –û—à–∏–±–∫–∏ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

                try:
                    # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
                    description_block = WebDriverWait(driver, 20).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "div[data-test='OBJECT-DESCRIPTION-CONTENT']"))
                    )
                    soup = BeautifulSoup(description_block.get_attribute("innerHTML"), "html.parser")

                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ RESTRICT-TEXT
                    first_paragraph = soup.find("div", {"data-test": "RESTRICT-TEXT"})

                    if first_paragraph:
                        new_description = first_paragraph.text.strip()
                        logger.info(f"[{process_id}] [INFO] –û–ø–∏—Å–∞–Ω–∏–µ: {new_description}")

                        if len(description) > 5:
                            descriptions[url] = new_description
                        else:
                            logger.info(f"[{process_id}] [INFO] –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'")

                    break

                except Exception as e:
                    attempts += 1
                    logger.error(f"[{process_id}] [ERROR {attempts}/{max_attempts}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")

                    if attempts > 3:
                        asyncio.run(delete_event_by_url(url))
                        logger.warning(f"[{process_id}] [WARNING] –°—Ç—Ä–∞–Ω–∏—Ü–∞ {url} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å! –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã.")
                        break

                    driver.quit()
                    time.sleep(5)
                    driver = init_driver()
                    logger.info(f'[{process_id}] [INFO] –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω')
                    time.sleep(5)

            time.sleep(random.uniform(0.5, 2))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–∞–Ω–∞
            current_count += 1
        logger.info(f'[{process_id}] [INFO] –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π descriptions')
        return descriptions

    except Exception as e:
        logger.error(f"[{process_id}] [ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:")
        logger.error(traceback.format_exc())
        return descriptions

    finally:

        if 'driver' in locals():
            driver.quit()
            logger.info(f"[{process_id}] [INFO] –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç!")


def get_descriptions_parallel(urls: List[str], num_processes: int = 2) -> Dict[str, str]:
    chunk_size = max(1, len(urls) // num_processes)  # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏
    url_chunks = [urls[i:i + chunk_size] for i in range(0, len(urls), chunk_size)]

    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º {num_processes} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç {chunk_size} —Å—Å—ã–ª–æ–∫...")


    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä –æ–ø–∏—Å–∞–Ω–∏–π –≤ –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ."""
    with multiprocessing.Pool(processes=num_processes) as pool:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 2 –ø—Ä–æ—Ü–µ—Å—Å–∞
        results = pool.starmap(get_event_description, [(i, chunk) for i, chunk in enumerate(url_chunks)])

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å
    merged_results = {}
    for result in results:
        if result:
            merged_results.update(result)

    return merged_results

